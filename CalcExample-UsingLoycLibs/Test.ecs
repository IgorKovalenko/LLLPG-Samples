/*
	A scratchpad for playing
*/
#importMacros(Loyc.LLPG);
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Loyc;
using Loyc.Syntax;
using Loyc.Syntax.Lexing;

struct StringToken : ISimpleToken<string>
{
	public string Type { get; set; }
	public object Value { get { return Type; } }
	public int StartIndex { get; set; }
}

class ExprParser : BaseParserForList<StringToken, string>
{
	public ExprParser(string input) 
		: this(input.Split(' ').Select(word => 
				new StringToken { Type=word }).ToList()) {}
	public ExprParser(IList<StringToken> tokens, ISourceFile file = null) 
		: base(tokens, default(StringToken), file ?? EmptySourceFile.Unknown) 
		{ F = new LNodeFactory(SourceFile); }
	
	protected override string ToString(string tokenType) { return tokenType; }

	LNodeFactory F = new LNodeFactory(EmptySourceFile.Unknown);
	LNode Op(LNode lhs, StringToken op, LNode rhs) { 
		return F.Call((Symbol)op.Type, lhs, rhs, lhs.Range.StartIndex, rhs.Range.EndIndex);
	}

	[AddCsLineDirectives(false)]
	LLLPG(parser(laType: string, terminalType: StringToken));

	public rule LNode Expr(int prec = 0) @[
		( "-" r:=Expr(50) { $result = F.Call((Symbol)"-", r, 
		                              $"-".StartIndex, r.Range.EndIndex); }
		/ result:Atom )
		greedy // to suppress ambiguity warning
		(   // Remember to add [Local] when your predicate uses a local variable
			&{[Local] prec <= 10}
			'''=''' r:=Expr(10)
			{ $result = Op($result, $'''=''', r); }
		|   &{[Local] prec < 20}
			op:=('''&&'''|'''||''') r:=Expr(20)
			{ $result = Op($result, op, r); }
		|   &{[Local] prec < 30}
			op:=('''>'''|'''<'''|'''>='''|'''<='''|'''=='''|'''!=''') r:=Expr(30)
			{ $result = Op($result, op, r); }
		|   &{[Local] prec < 40}
			op:=('''+'''|'''-''') r:=Expr(40)
			{ $result = Op($result, op, r); }
		|   &{[Local] prec < 50}
			op:=('''*'''|'''/'''|'''>>'''|'''<<''') r:=Expr(50)
			{ $result = Op($result, op, r); }
		|   '''(''' Expr ''')''' 
			{ $result = F.Call($result, $Expr, $result.Range.StartIndex); }
		|   '''.''' rhs:Atom 
			{ $result = F.Dot ($result, $rhs,  $result.Range.StartIndex); }
		)*
	];
	rule LNode PrefixExpr() @[
		( '''-''' r:=PrefixExpr { $result = F.Call((Symbol)'''-''', r, 
										$'''-'''.StartIndex, r.Range.EndIndex); }
		/ result:PrimaryExpr )
	];
	rule LNode PrimaryExpr() @[
		result:Atom
		(	'''(''' Expr ''')''' { $result = F.Call($result, $Expr, $result.Range.StartIndex); }
		|	'''.''' rhs:Atom { $result = F.Dot ($result, $rhs,  $result.Range.StartIndex); }
		)*
	];
	rule LNode Atom() @[
		'''(''' result:Expr ''')''' { $result = F.InParens($result); }
	/	_ { 
			double n; 
			$result = double.TryParse($_.Type, out n) 
					? F.Literal(n) : F.Id($_.Type);
		}
	];
}
